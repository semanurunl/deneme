# -*- coding: utf-8 -*-
"""
Created on Mon Sep  8 15:38:09 2025

@author: A11003
"""


# -*- coding: utf-8 -*-
"""
Created on Mon Aug 18 16:56:33 2025

@author: T24115
"""

# -*- coding: utf-8 -*-
"""
Created on Tue Aug 12 14:27:45 2025

@author: t31917
"""
import pandas as pd

pd.set_option('display.max_columns', None)

import pyodbc
import numpy as np
import tkinter as tk

from tkinter import ttk, filedialog

import base64
import os
import time

pd.options.mode.chained_assignment = None 

# from os import path

# ReportDB bağlantısı yapar.
def connection_conf(SQL):
    con=pyodbc.connect(r"""Driver={SQL Server};
                          Server=TAIISDRDB\UDBP;
                          Database=ReportDB;
                          UID=tocbi;
                          PWD=TAIbi,42*;""")
    SQL_cikti=pd.read_sql(SQL,con)
    con.close()
    return SQL_cikti




# Girdi parça numaralarını SQL sorgusunda kullanılacak formata çevirir.
def convertTuple(tup):
        s = ''
        for item in tup:
            s =  s + ",'" + item + "'"  
        return s

# 
def operationTime_metalik(kod,size,tool,material,ws2):
    i = 1
    sure = 0 
    sure1 = 0 
    sure2 = 0 
    sure3 = 0 
    sure4 = 0 
    sure5 = 0 
    sure6 = 0
    sure7 = 0
    sure8 = 0
    sure9 = 0
    flag = True
    while i<25 and flag == True:
        if size in ws2.iat[0,i] and tool in ws2.iat[1,i] and material in ws2.iat[2,i]: 
            k = 4
            while k<100 and flag == True:
                if kod != "Finish":
                    if "Finish" not in ws2.iat[k,0] and ws2.iat[k,0] is not None:
                        if kod in ws2.iat[k,0]:
                            if size == "3>m" or str(ws2.iat[k,i]) == "nan": 
                                sure = ws2.iat[k,i]
                                sure1 = ws2.iat[k+1,i]
                                sure2 = ws2.iat[k+2,i]
                                sure3 = ws2.iat[k+3,i]
                                sure4 = ws2.iat[k+4,i]
                                sure5 = ws2.iat[k+5,i]
                                sure6 = ws2.iat[k+6,i]
                                sure7 = ws2.iat[k+7,i]
                                sure8 = ws2.iat[k+8,i]
                                sure9 = ws2.iat[k+9,i]
                            else:
                                sure = str(int(ws2.iat[k,i])+0)
                                sure1 = str(ws2.iat[k+1,i])
                                sure2 = str(ws2.iat[k+2,i])
                                sure3 = str(ws2.iat[k+3,i])
                                sure4 = str(ws2.iat[k+4,i])
                                sure5 = str(ws2.iat[k+5,i])
                                sure6 = str(ws2.iat[k+6,i])
                                sure7 = str(ws2.iat[k+7,i])
                                sure8 = str(ws2.iat[k+8,i])
                                sure9 = str(ws2.iat[k+8,i])
                            flag = False
                else:
                    if kod in ws2.iat[k,0]:
                        if size == "3>m": 
                            sure = ws2.iat[k,i]
                            sure1 = 0
                            sure2 = 0
                            sure3 = 0
                            sure4 = 0
                            sure5 = 0
                            sure6 = 0
                            sure7 = 0
                            sure8 = 0
                            sure9 = 0
                        else:
                            sure = str(ws2.iat[k,i])
                            sure1 = 0
                            sure2 = 0
                            sure3 = 0
                            sure4 = 0
                            sure5 = 0
                            sure6 = 0
                            sure7 = 0
                            sure8 = 0
                            sure9 = 0
                        flag = False
                k += 1
        elif kod == "Finish": 
            print(kod)
            sure = 2
            sure1 = 0
            sure2 = 0
            sure3 = 0
            sure4 = 0
            sure5 = 0
            sure6 = 0
            sure7 = 0
            sure8 = 0
            sure9 = 0
            flag = False               
        i += 1 
    return sure, sure1, sure2, sure3, sure4, sure5, sure6, sure7, sure8, sure9

def operationTime_comp(kod,ws3):
    k = 1
    sure = 0 
    sure1 = 0 
    sure2 = 0 
    sure3 = 0 
    sure4 = 0 
    sure5 = 0 
    sure6 = 0
    sure7 = 0
    sure8 = 0
    sure9 = 0
    flag = True
    while k<50 and flag == True:
        if kod in ws3.iat[k,0]:
            sure = str(int(ws3.iat[k,1])+2) 
            sure1 = str(ws3.iat[k+1,1])
            sure2 = str(ws3.iat[k+2,1])
            sure3 = str(ws3.iat[k+3,1])
            sure4 = str(ws3.iat[k+4,1])
            sure5 = str(ws3.iat[k+5,1])
            sure6 = str(ws3.iat[k+6,1])
            sure7 = str(ws3.iat[k+7,1])
            sure8 = str(ws3.iat[k+8,1])
            sure9 = str(ws3.iat[k+9,1])
            flag = False
        k += 1           
    return sure, sure1, sure2, sure3, sure4, sure5, sure6, sure7, sure8, sure9


def rota_bul(rota,y49statu,ncstatu,material_no):
    tur = ""
    kod = ""
    # print(rota,y49statu,ncstatu,material_no)
    
    # Y49statu == "E" rotadaki bütün tezgahların Y49 müdürlüğüne ait olduğunu göstermektedir.
    if y49statu == "E": 
        kod = "Finish"
        tur = "Metalik"
    
    # Rota 750 istasyonu ile başlıyorsa Finish olarak sınıflandırılır.
    # 415/422/424/427
    # 660:415/660:422/660:424/660:427
    # 647
    # 270:415/270:422/270:424/270:427 
    # 413
    # 194:411 ile başlarsa FINISH 
    
    
    finishlist = ["750","415","422","424","427","776","660:415","660:422","660:424","660:427","647","270:415","270:422","270:424","270:427","413","194:411","420:444","420:647","239:411"]
    
    for i in range(len(finishlist)):
        if finishlist[i] == rota[0:3] or finishlist[i]==rota[0:7]:
            kod = "Finish"
            tur = "Metalik"

    ###################################
    # Metalik Parça Rotaları
    ###################################

    # Hiçbir eşleşmeme olmaması durumunda rotada 864 istasyonu bulunuyorsa basit sheet metal olarak sınıflandırıldı. [05.07.2023]
    if "864" in rota:
        kod = "(S2)"
        tur = "Metalik"
    
    # Rota 207 istasyonu ile başlıyorsa Bushing olarak sınıflandıırlır
    if rota.startswith("207",0,3) is True:
        kod = "Bushing"
        tur = "Metalik"
    
    if rota.startswith("211:207",0,7) is True:
        kod = "Bushing"
        tur = "Metalik"
    
    # NS3 veya NS7 istasyonu içeren parça basit sheet metal olarak sınıflandırılır
    if "NS3" in rota or "NS7" in rota:
        kod= "(S2)"
        tur = "Metalik"
        
    #STRETCH SHEET METAL 
    if "151" in rota or "12B" in rota or "120" in rota or "115" in rota:

        if "214" in rota or "216" in rota or "217" in rota or "219" in rota or "222" in rota or "HUR" in rota or "226" in rota or "227" in rota or "232" in rota or "233" in rota or "243" in rota or "251" in rota or "254" in rota or "255" in rota or "256" in rota or "261" in rota or "295" in rota or "299" in rota or "289" in rota:
            kod= "(S16)"
        else:
            kod= "(S15)"
        tur = "Metalik" 
        
    #METALİK
    if "134" in rota or "136" in rota or "139" in rota or "140" in rota:
        if "551" in rota or "553" in rota:
            kod= "(E10)"
        else:
            kod= "(E2)"
        tur = "Metalik"
    #KONVANSİYONEL 
    if "144" in rota and "194" in rota:
        kod= "(M5)"
        tur = "Metalik"
        
    if "206" in rota or "221" in rota or "225" in rota or "231" in rota or "238" in rota or "241" in rota or "245" in rota or "247" in rota or "248" in rota or "270" in rota:
        kod= "(M5)"
        tur = "Metalik"
    
    #TORNA 
    if "Y61" in rota or "209" in rota or "220" in rota or "201" in rota or "YM1" in rota:
        kod= "(T3)"
        tur = "Metalik"
    #5 EKSEN TEZGAH ROTASI  
    if "214" in rota or "216" in rota or "217" in rota or "219" in rota or "222" in rota or "HUR" in rota or "226" in rota or "227" in rota or "232" in rota or "233" in rota or "243" in rota or "251" in rota or "254" in rota or "255" in rota or "256" in rota or "261" in rota or "295" in rota or "299" in rota or "289" in rota or "Y64" in rota or "298" in rota:
        kod= "(M9)"
        tur = "Metalik"
    #TEZGAHA GİDEN METAL BOND 
    if "930" in rota:
        if "214" in rota or "216" in rota or "217" in rota or "219" in rota or "222" in rota or "HUR" in rota  or "226" in rota or "227" in rota or "232" in rota or "233" in rota  or "243" in rota or "251" in rota or "254" in rota or "255" in rota or "256" in rota or "261" in rota or "295" in rota or "299" in rota or "289" in rota:
            kod= "(MB2)" 
        else:
            kod= "(MB1)"
        tur = "Metalik"
    #TUBING SUBASSY ROTASI
    if "341" in rota or "342" in rota or "348" in rota:
        kod= "(TW1)"
        tur = "Metalik"
    #TUBING DETAY ROTASI
    if "341" in rota and "342" not in rota:
        kod= "(TW3)"
        tur = "Metalik"
    #KAYNAK
    if "307" in rota or "308" in rota or "309" in rota:
        kod= "Kaynak"
        tur = "Metalik"
        
    #TUBING SUBASSY + KAYNAK ROTASI
    if ("341" in rota and ("307" in rota or "308" in rota or "309" in rota)) or ("342" in rota and ("307" in rota or "308" in rota or "309" in rota)):
        kod = "(TWK)"
        tur = "Metalik"
        
    if kod == "" and (material_no[-2:] == "T1" or material_no[-2:] == "T2" or material_no[-2:] == "T3" or material_no[-2:] == "F1" or material_no[-2:] == "F2" or material_no[-2:] == "F3" or material_no[-1:] == "F" or material_no[-1:] == "T") or "450" in rota:
        kod = "First Cut"
        tur = "Metalik"
    # eklenecek
    
    #####################################################
    # Kompozit parça rotaları:
    #####################################################
    
    if "901" in rota or "904" in rota:
        kod = "Kompozit Core Cut"
        tur = "Kompozit"
        
    if "RTH" in rota or "RLY" in rota or "RTM" in rota or "RTD" in rota:
        kod= "(CAMB1)"
        tur="Kompozit"
   
    if "938" in rota and "970" in rota:
        kod= "(CAMB1)"
        tur="Kompozit"
    
    if "912" in rota:
        if ncstatu == "H":
            count937 = rota.count("937") 
            count9372 = rota.count("937:937")
            if count937 - count9372 > 1:
                kod = "(CAMB2)"
            else:
                kod ="(CAMB1)"
            tur = "Kompozit"
        else: 
            count937 = rota.count("937") 
            count9372 = rota.count("937:937")
            if count937 - count9372 > 1:
                kod = "(CAMB4)"
            else:
                kod ="(CAMB3)"
            tur = "Kompozit"
    
    if rota.startswith("951",0,3) is True or rota.startswith("941",0,3) is True:
        if "937" not in rota:
            kod = "(CAMB5)"
            tur = "Kompozit"
                 
    if "930" in rota:
        if ncstatu == "E":
            kod = "(MB2)"
        else:
            kod = "(MB1)"
        tur = "Kompozit"
    
    #####################################################
    # HARNESS parça rotaları:
    #####################################################
    
    if "674" in rota and material_no.startswith("TMS",0,3) is True:
        kod = "Harness-Etiket"
        tur = "Harness"
 
    if "674" in rota and material_no.startswith("TMS",0,3) is False:
        kod = "Harness"
        tur = "Harness"
    
    if "WCS" in rota or "SLI" in rota or "HMS" in rota or "HMQ" in rota or "HTC" in rota:
        kod = "Harness"
        tur = "Harness"

    #####################################################
    # YS parça rotaları:
    #####################################################      
    
    if "SUB" in rota:
        kod = "Yardımcı Sanayi"
        tur = "Yardımcı Sanayi"
    
    return kod, tur

# Planlamada sadece Y49 müdürlüğüne ait tezgah varsa ve hiçbir rota koduna girmiyorsa FINISH olarak kategorize edilecektir.
# Bu sebeple rotada Y49 müdürülüğüne ait tezgah dışında bir tezgah olup olmadığı kontrol edilmektedir.
    
def y49check(rota,rotaref):
    """Optimize: set tabanlı kontrol"""
    y49_set = set(str(rotaref["Y49TC"].iloc[0]).split(":"))
    # rota içindeki tüm istasyonlar Y49 içindeyse E, aksi halde H
    parts = rota.split(":")
    for p in parts:
        if p not in y49_set:
            return "H"
    return "E"

# Rotada NC tezgah olup olmadığını kontrol etmektedir.

def nccheck(rota,rotaref):
    """Optimize: set tabanlı kontrol"""
    nc_set = set(str(rotaref["Y4BTC"].iloc[0]).split(":"))
    parts = rota.split(":")
    for p in parts:
        if p in nc_set:
            return "E"
    return "H"

class MaterialGUI:
    def __init__(self, master):
        start_time = time.time()
        self.master = master
        master.title("Havacılık Yapısalları GMY - Katalog Süre Bulucu")

        # Set custom style for widgets
        self.style = ttk.Style()
        self.style.configure("TFrame", background="#F0F0F0")
        self.style.configure("TLabel", background="#F0F0F0", font=("Calibri", 12,"bold"))
        self.style.configure("Submit.TButton", borderwidth=1, relief="raised", background="#4CAF50",
                             foreground="#FFFFFF", font=("Calibri", 12, "bold"), pady=5, padx=10)
        self.style.map("Submit.TButton", background=[("active", "#388E3C")],
                       relief=[("pressed", "sunken"), ("!pressed", "raised")])

        # Create Copy & Paste Data section
        self.data_frame = ttk.Frame(master)
        self.data_frame.pack(side=tk.TOP, padx=20, pady=20)

        # Metin alanı kullanmıyorsan gizli bırak; clear_data güvenli hale getirildi.
        # self.data_label = ttk.Label(self.data_frame, text="Parça Numaralarını Buraya Yapıştırın:")
        # self.data_label.pack(anchor=tk.W)
        # self.data_text = tk.Text(self.data_frame, height=10, font=("Calibri", 12))
        # self.data_text.pack()

        self.submit_button = ttk.Button(self.data_frame, style="Bold.TButton",text="Ara", command=self.get_data)
        self.submit_button.pack(pady=(10, 0))
        self.clear_button = ttk.Button(self.data_frame, style="Bold.TButton", text="Listeyi Temizle", command=self.clear_data)
        self.clear_button.pack(pady=(10, 0))

        # Create Results section
        self.results_frame = ttk.Frame(master)
        self.results_frame.pack(side=tk.TOP, padx=20, pady=(20, 20))

        self.results_table = ttk.Treeview(self.results_frame, columns=["ID","Parça", "Boyut", "Malzeme", "Takım", "Rota Kodu", "ÜS", "TTİS","TÜİS","CMP","CNV","CPM", "NC1","NC2","NC4","NC5","NC6","PNT","SAS","SM2","SMT", "Diğer","Rota"], show="headings")
        self.results_table.heading("Parça", text="Parça")
        self.results_table.heading("Boyut", text="Boyut")
        self.results_table.heading("Rota Kodu", text="Rota Kodu")
        self.results_table.heading("Malzeme", text="Malzeme")
        self.results_table.heading("Takım", text="Takım")
        self.results_table.heading("ÜS", text="ÜS")
        self.results_table.heading("TTİS", text="TTİS")
        self.results_table.heading("TÜİS", text="TÜİS")
        self.results_table.heading("CMP", text="CMP")
        self.results_table.heading("CNV", text="CNV")
        self.results_table.heading("CPM", text="CPM")
        self.results_table.heading("NC1", text="NC1")
        self.results_table.heading("NC2", text="NC2")
        self.results_table.heading("NC4", text="NC4")
        self.results_table.heading("NC5", text="NC5")
        self.results_table.heading("NC6", text="NC6")
        self.results_table.heading("PNT", text="PNT")
        self.results_table.heading("SAS", text="SAS")
        self.results_table.heading("SM2", text="SM2")
        self.results_table.heading("SMT", text="SMT")
        self.results_table.heading("Diğer", text="Diğer")
        self.results_table.heading("ID", text="ID")
        self.results_table.heading("Rota", text="Rota")
        self.results_table.column("Parça", width=130, anchor="center")
        self.results_table.column("Boyut", width=75, anchor="center")
        self.results_table.column("Rota Kodu", width=65, anchor="center")
        self.results_table.column("Malzeme", width=70, anchor="center")
        self.results_table.column("Takım", width=55, anchor="center")
        self.results_table.column("ÜS", width=40, anchor="center")
        self.results_table.column("TTİS", width=40, anchor="center")
        self.results_table.column("TÜİS", width=40, anchor="center")
        self.results_table.column("CMP", width=40, anchor="center")
        self.results_table.column("CNV", width=40, anchor="center")
        self.results_table.column("CPM", width=40, anchor="center")
        self.results_table.column("NC1", width=40, anchor="center")
        self.results_table.column("NC2", width=40, anchor="center")
        self.results_table.column("NC4", width=40, anchor="center")
        self.results_table.column("NC5", width=40, anchor="center")
        self.results_table.column("NC6", width=40, anchor="center")
        self.results_table.column("PNT", width=40, anchor="center")
        self.results_table.column("SAS", width=40, anchor="center")
        self.results_table.column("SM2", width=40, anchor="center")
        self.results_table.column("SMT", width=40, anchor="center")
        self.results_table.column("Diğer", width=55, anchor="center")
        self.results_table.column("ID", width=25, anchor="center")
        self.results_table.column("Rota", width=25, anchor="center")
        self.results_table.pack(pady=(10, 0))

        self.export_button = ttk.Button(self.results_frame, text="Excel Oluştur", command=self.export_results) #EXCELE AKTARMA SEÇENEĞİ İÇİN
        self.export_button.pack(pady=(10, 0))
        
        self.data_frame_2 = ttk.Frame(master)
        self.data_frame_2.pack(side=tk.RIGHT, padx=10, pady=10)
        self.data_label_2 = ttk.Label(self.data_frame_2, text=" Y5A90 - Kapasite Değerlendirme ve İş Analitiği ", relief= "solid", font= ("Helvetica 8"))
        self.data_label_2.pack(anchor=tk.W)
        # Bitiş zamanı ve çalışma süresi
        end_time = time.time()  # Bitiş zamanını alıyoruz
        elapsed_time = end_time - start_time  # Geçen süreyi hesaplıyoruz
        
        print(f"Toplam çalışma süresi: {elapsed_time:.2f} saniye.")
        
    def show_detay_data(self, df_export):
        # Treeview'ı temizle
        for item in self.results_table.get_children():
            self.results_table.delete(item)

        # Kolonları df_export'a göre güncelle
        self.results_table["columns"] = list(df_export.columns)
        self.results_table["show"] = "headings"
        
        for col in df_export.columns:
            self.results_table.heading(col, text=col)
            self.results_table.column(col, width=100, anchor="center")
        
        # Tek seferde doldur
        for _, row in df_export.iterrows():
            self.results_table.insert("", "end", values=list(row))   
            
    def clear_data(self):
        # Metin alanı kullanılmıyorsa hata vermesin
        if hasattr(self, "data_text"):
            self.data_text.delete("1.0","end")

    def get_data(self):
        t0 = time.time()
        # Clear previous results
        self.results_table.delete(*self.results_table.get_children())
        
        # Metalik/Kompozit decision tree okumaları kapalı; süre matrisi kullanılmıyor.
        # İleride tekrar açılacaksa ws2/ws3 burada okunabilir.

        # CSV'den giriş listesi
        input_path = r'C:\Users\A11003\Desktop\inputbutce2.csv'
        df = pd.read_csv(input_path, delimiter=',', low_memory=False)
        material_nos = df['PARCANO'].dropna().astype(str).str.strip().tolist()
        partList = '(' + convertTuple(material_nos).strip(',') + ')'
        
        # --- SQL 1: parça detayları
        self.data_label_2.config(text = "Parça listesi için Tool/Ebat/Material verileri çekiliyor...")
        sql_part_details = """
 SET NOCOUNT ON;
DROP TABLE IF EXISTS #PARTTOOLS, #MATERIAL, #ROTA, #ATOLKONT 
SELECT DISTINCT PT.PARTNO, 
    CASE WHEN PT.TOOLNO IS NOT NULL THEN 'TOOLVAR' ELSE 'TOOLYOK' END AS TOOLVARYOK INTO #PARTTOOLS
FROM EPLN.V_PARTTOOLS_LAST_REV AS PT;

SELECT DISTINCT TRIM(MX.PARTNO) AS PARTNO, MX.WIDTH, MX.LENGTH, MX.MCRECORDNO, MX.UOM INTO #MATERIAL
FROM EPLN.MATERIAL MX 
INNER JOIN EPLN.V_HEADER_LAST_REV HX ON MX.PARTNO = HX.PARTNO AND MX.PARTREV = HX.PARTREV 
WHERE MX.PARTNO NOT LIKE '%***%';


SELECT OP.PARTNO, OP.PARTREV, 
    STRING_AGG(TRIM(OP.TASKCENTER), ':') WITHIN GROUP (ORDER BY OP.STEPNO ASC) AS ROTA 
    INTO #ROTA
FROM EPLN.OPS_MASTER_TC_LAST_VALID AS OP 
WHERE OP.IS_ALTERNATIVE = 0
GROUP BY OP.PARTNO, OP.PARTREV;

SELECT DISTINCT A.PLANT AS PROJE, TRIM(A.PARCANO) AS PARCANO, T.SINIFI INTO #ATOLKONT 
FROM ERP.ATOLKONT A 
INNER JOIN ERP2.TMLZPRJ T ON A.PLANT = T.PROJE AND A.PARCANO = T.MALZEMENO 
WHERE T.TEMIN_SEKLI IN ('M','N') AND A.INSTR >='2018-01-01';


WITH MAINPART AS (
    SELECT DISTINCT 
        CASE WHEN TOOL.TOOLVARYOK IS NOT NULL THEN 'Var' ELSE 'Yok' END AS TOOLVARYOK,
        CASE 
            WHEN MC.NOMENCLATURE LIKE '%ALUMINUM%' THEN 'Alüminyum'
            WHEN MC.NOMENCLATURE LIKE '%TITANIUM%' THEN 'Titanyum'
            WHEN MC.NOMENCLATURE LIKE '%STEEL%' THEN 'Sert Malzemeler'
            WHEN LEFT(ROTA.ROTA,3) = '207' AND (MC.NOMENCLATURE IS NULL OR MC.NOMENCLATURE IN ('None','N/A')) THEN 'Alüminyum'
            ELSE MC.NOMENCLATURE 
        END AS MALZEMETIPI, 
        CASE 
            WHEN M.UOM = 'SI' THEN 
                CASE 
                    WHEN MAX(M.WIDTH) > MAX(M.LENGTH) THEN 
                        CASE 
                            WHEN MAX(M.WIDTH)*25.4 < 500 THEN '0-0.50 m' 
                            WHEN MAX(M.WIDTH)*25.4 < 1000 THEN '0.50 m-1 m'
                            WHEN MAX(M.WIDTH)*25.4 < 3000 THEN '1-3 m'
                            ELSE '3>m' 
                        END 
                    ELSE
                        CASE 
                            WHEN MAX(M.LENGTH)*25.4 < 500 THEN '0-0.50 m' 
                            WHEN MAX(M.LENGTH)*25.4 < 1000 THEN '0.50 m-1 m'
                            WHEN MAX(M.LENGTH)*25.4 < 3000 THEN '1-3 m'
                            ELSE '3>m' 
                        END
                END
            ELSE
                CASE 
                    WHEN MAX(M.WIDTH) > MAX(M.LENGTH) THEN 
                        CASE 
                            WHEN MAX(M.WIDTH) < 500 THEN '0-0.50 m' 
                            WHEN MAX(M.WIDTH) < 1000 THEN '0.50 m-1 m'
                            WHEN MAX(M.WIDTH) < 3000 THEN '1-3 m'
                            ELSE '3>m' 
                        END 
                    ELSE
                        CASE 
                            WHEN MAX(M.LENGTH) < 500 THEN '0-0.50 m' 
                            WHEN MAX(M.LENGTH) < 1000 THEN '0.50 m-1 m'
                            WHEN MAX(M.LENGTH) < 3000 THEN '1-3 m'
                            ELSE '3>m' 
                        END
                END
        END AS EBATKATEGORI,
        T.SINIFI AS URETIMTIPI
    FROM ERP2.TMLZPRJ T
    LEFT JOIN #MATERIAL AS M ON T.MALZEMENO = M.PARTNO
    LEFT JOIN EPLN.MATERIALCATALOG MC ON M.MCRECORDNO = MC.MCRECORDNO 
    LEFT JOIN #PARTTOOLS AS TOOL ON T.MALZEMENO = TOOL.PARTNO
    INNER JOIN #ROTA AS ROTA ON T.MALZEMENO = ROTA.PARTNO
    WHERE T.MALZEMENO IN  """+partList+"""
    GROUP BY TRIM(T.MALZEMENO), ROTA.PARTREV, ROTA.ROTA, TOOL.TOOLVARYOK, MC.NOMENCLATURE, T.SINIFI, M.UOM, T.PROJE
),

NEWLIST AS (
    SELECT DISTINCT 
        T.PARCANO AS PARTNO, 
        ROTA.PARTREV,
        ROTA.ROTA,
        CASE WHEN TOOL.TOOLVARYOK IS NOT NULL THEN 'Var' ELSE 'Yok' END AS TOOLVARYOK,
        CASE 
            WHEN MC.NOMENCLATURE LIKE '%ALUMINUM%' THEN 'Alüminyum'
            WHEN MC.NOMENCLATURE LIKE '%TITANIUM%' THEN 'Titanyum'
            WHEN MC.NOMENCLATURE LIKE '%STEEL%' THEN 'Sert Malzemeler'
            WHEN LEFT(ROTA.ROTA,3) = '207' AND (MC.NOMENCLATURE IS NULL OR MC.NOMENCLATURE IN ('None','N/A')) THEN 'Alüminyum'
            ELSE MC.NOMENCLATURE 
        END AS MALZEMETIPI, 
        CASE 
            WHEN M.UOM = 'SI' THEN 
                CASE 
                    WHEN MAX(M.WIDTH) > MAX(M.LENGTH) THEN 
                        CASE 
                            WHEN MAX(M.WIDTH)*25.4 < 500 THEN '0-0.50 m' 
                            WHEN MAX(M.WIDTH)*25.4 < 1000 THEN '0.50 m-1 m'
                            WHEN MAX(M.WIDTH)*25.4 < 3000 THEN '1-3 m'
                            ELSE '3>m' 
                        END 
                    ELSE
                        CASE 
                            WHEN MAX(M.LENGTH)*25.4 < 500 THEN '0-0.50 m' 
                            WHEN MAX(M.LENGTH)*25.4 < 1000 THEN '0.50 m-1 m'
                            WHEN MAX(M.LENGTH)*25.4 < 3000 THEN '1-3 m'
                            ELSE '3>m' 
                        END
                END
            ELSE
                CASE 
                    WHEN MAX(M.WIDTH) > MAX(M.LENGTH) THEN 
                        CASE 
                            WHEN MAX(M.WIDTH) < 500 THEN '0-0.50 m' 
                            WHEN MAX(M.WIDTH) < 1000 THEN '0.50 m-1 m'
                            WHEN MAX(M.WIDTH) < 3000 THEN '1-3 m'
                            ELSE '3>m' 
                        END 
                    ELSE
                        CASE 
                            WHEN MAX(M.LENGTH) < 500 THEN '0-0.50 m' 
                            WHEN MAX(M.LENGTH) < 1000 THEN '0.50 m-1 m'
                            WHEN MAX(M.LENGTH) < 3000 THEN '1-3 m'
                            ELSE '3>m' 
                        END
                END
        END AS EBATKATEGORI,
        T.SINIFI AS URETIMTIPI
    FROM #ATOLKONT AS T
    LEFT JOIN #MATERIAL AS M ON T.PARCANO = M.PARTNO
    LEFT JOIN EPLN.MATERIALCATALOG MC ON M.MCRECORDNO = MC.MCRECORDNO 
    LEFT JOIN #PARTTOOLS AS TOOL ON T.PARCANO = TOOL.PARTNO
    LEFT JOIN MAINPART MP ON T.SINIFI = MP.URETIMTIPI
    INNER JOIN #ROTA AS ROTA ON T.PARCANO = ROTA.PARTNO
    WHERE MP.URETIMTIPI IS NOT NULL
    GROUP BY T.PARCANO, ROTA.PARTREV, ROTA.ROTA, TOOL.TOOLVARYOK, MC.NOMENCLATURE, T.SINIFI, M.UOM, T.PROJE, MP.URETIMTIPI, MP.TOOLVARYOK
)

SELECT NL.*
FROM NEWLIST NL
INNER JOIN MAINPART MP ON 
    MP.EBATKATEGORI = NL.EBATKATEGORI 
    AND MP.URETIMTIPI = NL.URETIMTIPI 
    AND MP.TOOLVARYOK = NL.TOOLVARYOK 
    AND MP.MALZEMETIPI = NL.MALZEMETIPI
        """
        df_part_details = connection_conf(sql_part_details)
        df_part_details['index_col'] = df_part_details.index
        df_part_details["CODE"] = ""
        material_nos2 = df_part_details['PARTNO'].dropna().astype(str).str.strip().tolist()
        partList2 = '(' + convertTuple(material_nos2).strip(',') + ')'

        # --- Cost center Excel'i yükle ve tek seferde reindex et
        self.data_label_2.config(text = "Parça listesi için maliyet merkezi verileri çekiliyor...")
        excel_path = r"C:\Users\A11003\Desktop\SQL_data.xlsx"
        df_cost_center_all = pd.read_excel(excel_path)
        df_cost_center_all['PARCA_NO'] = df_cost_center_all['PARCA_NO'].astype(str)
        df_cost_center = df_cost_center_all.set_index("PARCA_NO")
        # cost center kolonları
        cc_cols = ["ADC","CMP","CNV","CPM","EKL","HCC","HRN","NC2","NC1",
                   "OTY","PNT","PPC","QAA","QAL","SAS","SM2","SMT","TDP","TMN","YDD","YME","YPM"]
        # PARTNO sırasına göre hizala
        cc_pulled = df_cost_center.reindex(material_nos2)[cc_cols]

        # --- Referans tablolar
        sql_y49_tc = """
           SELECT DISTINCT STRING_AGG(TRIM(K.IS_MERKEZI),':') Y49TC
            FROM ERP.KAPASITE K 
                WHERE K.DEPT_HOME LIKE '%Y49%'
        """
        df_y49_tc = connection_conf(sql_y49_tc)

        sql_nc_tc = """
           SELECT DISTINCT CONCAT('905:958:91A:91B:91C:91D:961:993:933:',STRING_AGG(TRIM(K.IS_MERKEZI),':')) AS Y4BTC
            FROM ERP.KAPASITE K 
            WHERE K.DEPT_HOME LIKE '%Y4B%'
        """
        df_nc_tc = connection_conf(sql_nc_tc)

        # ---- ANA İŞ: Döngüde sadece hafif işler; yazma/gösterme en sonda
        export_rows = []
        indis = 0

        # Hızlı erişim için df_part_details'tan gerekli alanları seriler olarak çek
        rota_series = df_part_details["ROTA"].astype(str).str.replace(":PC2:022", "", regex=False)
        size_series = df_part_details["EBATKATEGORI"].astype(str)
        tool_series = df_part_details["TOOLVARYOK"].astype(str)
        material_series = df_part_details["MALZEMETIPI"].astype(str)
        part_series = df_part_details["PARTNO"].astype(str)

        # Toplu y49/nc durumu hesapla (vektörel değil ama minimal fonksiyon çağrısı)
        # Rota bazında tek tek ama set tabanlı fonksiyonlarla hızlı
        y49_cache = {}
        nc_cache = {}

        def fast_y49(rota_str):
            if rota_str in y49_cache:
                return y49_cache[rota_str]
            s = y49check(rota_str, df_y49_tc)
            y49_cache[rota_str] = s
            return s

        def fast_nc(rota_str):
            if rota_str in nc_cache:
                return nc_cache[rota_str]
            s = nccheck(rota_str, df_nc_tc)
            nc_cache[rota_str] = s
            return s

        # Döngü (yalnızca kod bulma ve cost center satırı okuma)
        for i in range(len(df_part_details)):
            rotay = rota_series.iat[i]
            material_no = part_series.iat[i]
            size = size_series.iat[i]
            tool = tool_series.iat[i]
            material = material_series.iat[i]
            pn = material_no

            # y49/nc
            try:
                y49statu = fast_y49(rotay)
            except:
                y49statu = "???"
            try:
                ncstatu = fast_nc(rotay)
            except:
                ncstatu = "???"

            # rota kodu
            try:
                rotax = rota_bul(rotay, y49statu, ncstatu, material_no)
                kod = rotax[0] if rotax and rotax[0] else "???"
                if kod == "Kaynak" and (material=="None" or material=="N/A" or material is None):
                    material = "Sert Malzemeler"
                if kod == "Metalik" and material=="TUNGSTEN":
                    material = "Titanyum"
                if kod == "Metalik" and material=="NICKEL":
                    material = "Sert Malzemeler"
            except:
                kod = "???"

            df_part_details.at[df_part_details.index[i], "CODE"] = kod

            # cost center satırı (tek seferde hizalanmış tablodan)
            cc_row = cc_pulled.loc[pn] if pn in cc_pulled.index else None
            if cc_row is None or cc_row.isna().all():
                adc=cmp=cnv=cpm=ekl=hcc=hrn=nc2=nc1=oty=pnt=ppc=qaa=qal=sas=sm2=smt=tdp=tmn=ydd=yme=ypm="???"
            else:
                # str'e çevir; NaN -> "???"
                vals = cc_row.where(pd.notna(cc_row), other="???").astype(str)
                adc,cmp,cnv,cpm,ekl,hcc,hrn,nc2,nc1,oty,pnt,ppc,qaa,qal,sas,sm2,smt,tdp,tmn,ydd,yme,ypm = [vals.get(k, "???") for k in cc_cols]

            indis += 1
            export_rows.append([
                indis, material_no, size, material, tool, kod,
                adc, cmp, cnv, cpm, ekl, hcc, hrn, nc2, nc1, oty, pnt, ppc, qaa, qal, sas, sm2, smt, tdp, tmn, ydd, yme, ypm, rotay
            ])

        # Döngüden sonra tek seferde filtrele, yaz ve göster
        df_part_details.to_excel("df_part_details.xlsx", index=False)

        cols = ['EBATKATEGORI','MALZEMETIPI','TOOLVARYOK','CODE']
        reference_df = df_part_details[df_part_details['PARTNO'].isin(material_nos)][cols].drop_duplicates()
        df_x = df_part_details.merge(reference_df, on=cols, how='inner')
        filtered_partnos = set(df_x['PARTNO'])

        final_rows = [row for row in export_rows if row[1] in filtered_partnos]
        cols_export = [
            'indis','material_no','size','material','tool','kod',
            'adc', 'cmp', 'cnv', 'cpm', 'ekl', 'hcc', 'hrn', 'nc2', 'nc1', 'oty', 'pnt', 'ppc', 'qaa', 'qal', 'sas', 'sm2', 'smt', 'tdp', 'tmn', 'ydd', 'yme', 'ypm','rota'
        ]
        df_export = pd.DataFrame(final_rows, columns=cols_export)

        numeric_cols = ['adc', 'cmp', 'cnv', 'cpm', 'ekl', 'hcc', 'hrn', 'nc2', 'nc1', 'oty', 'pnt', 'ppc', 'qaa', 'qal', 'sas', 'sm2', 'smt', 'tdp', 'tmn', 'ydd', 'yme', 'ypm']
        # "???" satırlarını at
        df_export = df_export[df_export['cmp'] != "???"].copy()
        # sayısal dönüştür
        df_export[numeric_cols] = df_export[numeric_cols].apply(pd.to_numeric, errors='coerce')
        df_export[numeric_cols] = df_export[numeric_cols].replace(0, np.nan).astype('float')

        df_grouped = df_export.groupby(['size','material','tool','kod'])[numeric_cols].mean().reset_index()

        with pd.ExcelWriter("dfxxx.xlsx") as writer:
            df_export.to_excel(writer, sheet_name="Detay", index=False)
            df_grouped.to_excel(writer, sheet_name="Ortalama", index=False)

        self.show_detay_data(df_export)
        self.data_label_2.config(text = "Y5A90 - Kapasite Değerlendirme ve İş Analitiği")

        print(f"Tam akış süresi: {time.time()-t0:.2f} sn")

    def export_results(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx")
        if file_path:
            columns = ["ID","Parça","Boyut", "Malzeme", "Takım", "Rota Kodu","CMP","CNV","CPM","NC1","NC2","NC4","NC5","NC6","PNT","SAS","SM2","SMT", "Diğer","Rota"]
            rows = []
            for item in self.results_table.get_children():
                row = []
                for column in columns:
                    row.append(self.results_table.item(item)["values"][columns.index(column)])
                rows.append(row)
            df = pd.DataFrame(rows, columns=columns)
            df.to_excel(file_path, index=False)

   
##The Base64 icon version as a string
icon = \
""" 

"""
icondata= base64.b64decode(icon)
## The temp file is icon.ico
tempFile= "icon.ico"
iconfile= open(tempFile,"wb")
## Extract the icon
iconfile.write(icondata)
iconfile.close()
window = tk.Tk()
window.wm_iconbitmap(tempFile)
## Delete the tempfile
os.remove(tempFile)

#window.wm_attributes('-transparentcolor','white')

gui = MaterialGUI(window)
window.mainloop()
